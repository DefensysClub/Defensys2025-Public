# Condition 0: Length of the flag = 70
flag = [""] * 70

# Condition 1: flag starts with "defensys{_"
prefix = "defensys{_" 
for i in range(10):
    flag[i] = prefix[i]

# Condition 2: flag at index 10 == "_"
flag[10] = "_"  

# Condition 3: each char from range 10 to 20 is generated by shifting the previous one by 5
for i in range(10, 21):
    flag[i + 1] = chr(ord(flag[i]) - 5)

# Condition 4: each char from range 21 to 29 is defined by doing bitwise operations on the previous indexes
flag[21] = chr(ord(flag[5]) & ord(flag[4]))
flag[22] = chr(ord(flag[6]) & ord(flag[5]))
flag[23] = chr(ord(flag[7]) | ord(flag[6]))
flag[24] = chr((ord(flag[8]) & ord(flag[7])) | (ord(flag[8]) ^ ord(flag[7])))
flag[25] = chr(ord(flag[10]) | ord(flag[9]))
flag[26] = chr(ord(flag[11]) & ord(flag[10]))
flag[27] = chr(ord(flag[12]) | ord(flag[11]))
flag[28] = chr((ord(flag[13]) & ord(flag[12])) | (ord(flag[13]) ^ ord(flag[12])))
flag[29] = chr(ord(flag[14]) | ord(flag[13]))

# Condition 2: flag at index 30 == "_"
flag[30] = "_"

# Condition 5: chars from range 30 to 40 are the xor of xor_key1 and target
xor_key1 = [0x05, 0x12, 0x03, 0x10, 0x07, 0x15, 0x08, 0x20, 0x09, 0x11]
target = "bwwOfJdIot"
for i in range(10):
    flag[31+i] = ''.join(chr(ord(target[i]) ^ xor_key1[i]))
flag[41] = "_"

# Condition 6: chars from range 42 to 50 are the chars from 17 to 25 reversed
for i, j in zip(range(42, 50), range(25, 17, -1)):
    flag[i] = flag[j]

# Condition 7: chars from range 50 to 64 are the xor of xor_key2 and target2
xor_key2 = [0x21, 0x34, 0x02, 0x15, 0x30, 0x12, 0x10, 0x25, 0x17, 0x33, 0x19, 0x29, 0x09, 0x10]
target2 = "~Gi|R{tLHApSsO"
for i in range(14):
    flag[50+i] = chr(ord(target2[i]) ^ xor_key2[i])

# Condition 8: char from range 64 to 69 are the brain rot word "sigma", making sure the sum of its chars == 529
brain_rot_word = "sigma"
s = 0
for i in brain_rot_word:
    s += ord(i)
assert s == 529
flag[64:68] = list(brain_rot_word)

# Condition 9: Flag ending with "}"
flag[69] = "}"

computed_flag = "".join(flag)
print(computed_flag)
